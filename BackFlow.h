#ifndef BACKFLOW_H_
#define BACKFLOW_H_
#include "SystemClass.h"
#include "WaveFunction.h" 
#include "SmartEigen.h"

class BackFlowClass : public WaveFunctionClass
{
  public:

  int n_a = 0,n_b = 0,n_p = 0,level;

  Array<complex<double>,1> var;

  complex<double> DET_a,DET_b;
  complex<double> DET_a_new,DET_b_new;

  SmartEigen Da,Db;   //Slater Type w.f for spin up and down electron like a buffer
  SmartEigen DA,DB;   //Slater Type w.f. for spin and down electron which corresponds to the current cofig. 
 
  void Init(SystemClass &system);
  void InitSpin(SystemClass &system);

  Array<complex<double>,2> eigs;      // Total orbitals generated by python or other, input is loaded here

  Array<complex<double>,2> Ma_bf;     // transformed orbitals
  Array<complex<double>,2> Ma_bf_old; //old transformed orbitals orbitals use it as a temp
  Array<complex<double>,2> Ma;        // Unbackflowed orbitals

  Array<complex<double>,2> Mb_bf;     // transformed orbitals
  Array<complex<double>,2> Mb_bf_old; //old transformed orbitals use it as a temp
  Array<complex<double>,2> Mb;        // Unbackflowed orbitals

  Array<int,1> spin; 

  complex<double> logevaluate(SystemClass &system,int &sign);
  complex<double> evaluate(SystemClass &system);
  complex<double> evaluateRatio(SystemClass &system,int swap1, int swap2);
  complex<double> evaluateRatio_check(SystemClass &system, int swap1, int swap2);
  complex<double> evaluateRatio(SystemClass &system,int start, int stop, int spin);

  //complex<double> evaluateRatio_Jastrow(SystemClass &system,int start, int stop, int spin);
 
  void AllDerivs(SystemClass &system, Array<complex<double>,1> &derivs,int start,int stop); //compute the derivative
  void CheckDerivs(SystemClass &system, Array<complex<double>,1> &derivs,int start, int stop);
 
  double GetParam_real(int i);
  void SetParam_real(int i, double param);
  double GetParam_imag(int i);
  void SetParam_imag(int i, double param);

  void InitM(SystemClass &system);
  void FillDet(SystemClass&,SmartEigen&,SmartEigen&,
  Array<complex<double>,2>&,Array<complex<double>,2>&);

  void FillDet(SystemClass &system,Array<complex<double>,2> &D_a,
  Array<complex<double>,2> &D_b, Array<complex<double>,2> &M_a,Array<complex<double>,2> &M_b);

  void GetEigs(SystemClass &system); //done read the orbitals from txt file eigs

  void CopyMatrix(Array<complex<double>,2> &Src,Array<complex<double>,2> &Dest);
  void CopyMatrix(SmartEigen &Src,Array<complex<double>,2> &Dest);

  void BackFlowCoord(SystemClass &system);
  void BackFlowTransform(SystemClass &system,int);

  void GetParameters();

  void ConvertSpin(SystemClass &system);
 
  void Swap(int i, int j);
  void Move(int site, int end_site, int spin);
  void Reject(SystemClass &system,int site,int end_site,int spin);

  void UpdateDets(SystemClass &system,int site, int end_site,int spin);
  void UpdateDets(SystemClass &system,int swap1, int swap2);
  complex<double> Sign(SystemClass &system); 
  void PrintMatrix(Array<complex<double>,2> &M);
  void PrintMatrix(SmartEigen &Eigs,int size);
  void PrintSpin(SystemClass &system);
};

#endif
